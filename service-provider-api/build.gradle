import org.gradle.api.publish.maven.MavenPublication

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id("com.google.protobuf") version "0.8.16"
    id("maven-publish")
}

group 'com.wks.servicemarketplace'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/w-k-s/Service-Marketplace")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation("com.wks.servicemarketplace:common:0.0.3")

    // Jackson
    implementation("com.fasterxml.jackson.core:jackson-databind:2.11.0")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.11.0")

    // RabbitMQ
    implementation 'com.rabbitmq:amqp-client:5.9.0'

    // Validation
    implementation 'org.glassfish:javax.el:3.0.0'
    implementation 'javax.el:javax.el-api:3.0.0'
    implementation 'org.hibernate:hibernate-validator:6.1.5.Final'

    // Protocol Buffers
    implementation 'com.google.protobuf:protobuf-java:3.0.0'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-protobuf:2.9.0"
}

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
}

// adds the directory in which the proto compiler generates Java code to the directories the :compileKotlin looks for Java source:
sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'
// ensures that the Java code is (re)generated before invoking :compileKotlin:
compileKotlin.dependsOn ':generateProto'

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/w-k-s/Service-Marketplace")

            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = 'com.wks.servicemarketplace'
            artifactId = 'service-provider-api'
            version = '0.0.4'

            from components.java
        }
    }
}

